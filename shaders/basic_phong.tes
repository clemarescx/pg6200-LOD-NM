#version 430 core
layout(triangles, equal_spacing, ccw) in;

struct btPatch
{
    vec3 bpoint_030;
    vec3 bpoint_021;
    vec3 bpoint_012;
    vec3 bpoint_003;
    vec3 bpoint_102;
    vec3 bpoint_201;
    vec3 bpoint_300;
    vec3 bpoint_210;
    vec3 bpoint_120;
    vec3 bpoint_111;
	vec3 te_Normal[3];
    vec2 te_Texture_coords[3];
    vec3 te_View[3];
    vec3 te_Light[3];
    };

in patch btPatch bt;
uniform mat4 proj_mat;
// uniform mat4 view_proj_mat;

out vec2 ex_Texture_coords;
out vec3 ex_View;
out vec3 ex_Light;

// show the barycentric coords as colour for debugging purposes
out vec3 baryColor;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)                                                   
{          
	vec2 p0 = vec2(gl_TessCoord.x) * v0;
	vec2 p1 = vec2(gl_TessCoord.y) * v1;
	vec2 p2 = vec2(gl_TessCoord.z) * v2;

    return p0 + p1 + p2;
}    

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
	vec3 p0 = vec3(gl_TessCoord.x)  * v0;
	vec3 p1 = vec3(gl_TessCoord.y)  * v1;
	vec3 p2 = vec3(gl_TessCoord.z)  * v2;
	return p0 + p1 + p2;
} 

void main(){
	// Pass through all non-position variables to the next shader
	ex_Texture_coords = interpolate2D( 	bt.te_Texture_coords[0], 
										bt.te_Texture_coords[1], 
										bt.te_Texture_coords[2]);
	ex_View = interpolate3D( bt.te_View[0], bt.te_View[1], bt.te_View[2]);
	ex_View = normalize(ex_View);
	ex_Light = interpolate3D( bt.te_Light[0], bt.te_Light[1], bt.te_Light[2]);
	ex_Light = normalize(ex_Light);

	// Interpolate the attributes of the output vertex using the barycentric coordinates 
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

	//baryColor = vec3(u,v,w);
	baryColor = (bt.te_Normal[0] + bt.te_Normal[1] + bt.te_Normal[2]) /3;

    float uPow3 = pow(u, 3);
    float vPow3 = pow(v, 3);
    float wPow3 = pow(w, 3);
    float uPow2 = pow(u, 2);
    float vPow2 = pow(v, 2);
    float wPow2 = pow(w, 2);
	vec3 out_position =  bt.bpoint_300 * wPow3 + bt.bpoint_030 * uPow3 + bt.bpoint_003 * vPow3 + 
                     bt.bpoint_210 * 3.0 * wPow2 * u + bt.bpoint_120 * 3.0 * w * uPow2 + bt.bpoint_201 * 3.0 * wPow2 * v + 
                     bt.bpoint_021 * 3.0 * uPow2 * v + bt.bpoint_102 * 3.0 * w * vPow2 + bt.bpoint_012 * 3.0 * u * vPow2 + 
                     bt.bpoint_111 * 6.0 * w * u * v;

	gl_Position = proj_mat * vec4(out_position, 1.0);
    //gl_Position = view_proj_mat * vec4(out_position, 1.0);
	
}